{"version":3,"sources":["MyObject.ts","hexagon.ts","index.ts"],"names":[],"mappings":"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","file":"src.9c3be167.map","sourceRoot":"../src","sourcesContent":["export interface MyObject {\n  vertices: number[][];\n  indices: number[][];\n}\n\nexport interface Buffers {\n  vbo: WebGLRenderbuffer;\n  ibo: WebGLRenderbuffer;\n}\n\nexport function getBuffers(\n  gl: WebGLRenderingContext,\n  obj: MyObject\n): Buffers | null {\n  const _vbo = gl.createBuffer();\n  const _ibo = gl.createBuffer();\n  if (!_vbo || !_ibo) {\n    return null;\n  }\n\n  const buff: Buffers = {\n    vbo: _vbo as WebGLBuffer,\n    ibo: _ibo as WebGLBuffer\n  };\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, buff.vbo);\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array(obj.vertices.flat()),\n    gl.STATIC_DRAW\n  );\n  gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buff.ibo);\n  gl.bufferData(\n    gl.ELEMENT_ARRAY_BUFFER,\n    new Int16Array(obj.indices.flat()),\n    gl.STATIC_DRAW\n  );\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n\n  return buff;\n}\n","import { MyObject } from \"./MyObject\";\n\nexport function getHexagon(length: number): MyObject {\n  return {\n    vertices: getVertices(length),\n    indices: getIndicese(length)\n  };\n}\n\nfunction getVertices(length: number): number[][] {\n  const th = 1.0 / length;\n  const tw2 = th / Math.sqrt(3);\n  const tw = tw2 * 2;\n\n  const arr = [];\n  for (let i = -length; i <= length; i++) {\n    const absi = Math.abs(i);\n\n    const y = th * i;\n    let x = tw2 * absi - 2.0 / Math.sqrt(3);\n    const n = length * 2 + 1 - absi;\n\n    for (let j = 0; j < n; j++) {\n      arr.push([x, y]);\n      x += tw;\n    }\n  }\n\n  return arr;\n}\n\nfunction triangles(top: number, bottom: number, n: number): number[][] {\n  let t = top;\n  let b = bottom;\n  const arr = [];\n\n  for (var i = 0; i < n; i++) {\n    arr.push([t, b, b + 1]);\n    t++;\n    b++;\n  }\n\n  return arr;\n}\n\nfunction getIndicese(length: number): number[][] {\n  let index = 0;\n  let num_triangles = length;\n  let arr: number[][] = [];\n\n  for (let i = 0; i < length; i++) {\n    const next_index = index + length + i + 1;\n    arr = arr.concat(triangles(next_index + 1, index, num_triangles++));\n    arr = arr.concat(triangles(index, next_index, num_triangles));\n    index = next_index;\n  }\n\n  for (let i = 0; i < length; i++) {\n    const next_index = index + 2 * length - i + 1;\n    arr = arr.concat(triangles(next_index, index, num_triangles--));\n    arr = arr.concat(triangles(index + 1, next_index, num_triangles));\n    index = next_index;\n  }\n\n  return arr;\n}\n","import { getBuffers, Buffers } from \"./MyObject\";\nimport { getHexagon } from \"./hexagon\";\n\nvar gl: WebGLRenderingContext;\n\nwindow.onload = () => {\n  const c = document.getElementById(\"webgl\") as HTMLCanvasElement;\n\n  const width = c.width;\n  const height = c.height;\n\n  const _gl = c.getContext(\"webgl\");\n  if (!_gl) {\n    alert(\"ERROR: WebGL API is not available\");\n    return;\n  }\n\n  gl = _gl as WebGLRenderingContext;\n  glInit(width, height);\n\n  const vs = `\n    attribute vec2 xy;\n    varying float r;\n    void main(void) {\n        gl_Position = vec4(xy, 0.0, 1.0);\n        r = sqrt(max(1.0 - dot(xy, xy), 0.0));\n    }`;\n  const fs = `precision mediump float;\n    varying float r;\n    void main(void) {\n        gl_FragColor = vec4(vec3(1.0, 1.0, 1.0) * r, 1.0);\n    }`;\n  const _program = create_program(vs, fs);\n  if (!_program) {\n    console.log(\"ERROR: failed to create a program.\");\n    return;\n  }\n\n  const program = _program as WebGLProgram;\n  const location = gl.getAttribLocation(program, \"xy\");\n  gl.enableVertexAttribArray(location);\n\n  const hexagon = getHexagon(16);\n  const _buff = getBuffers(gl, hexagon);\n  if (!_buff) {\n    console.log(\"ERROR: failed to create a buffer.\");\n    return;\n  }\n  const buff = _buff as Buffers;\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, buff.vbo);\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buff.ibo);\n  gl.vertexAttribPointer(location, 2, gl.FLOAT, false, 0, 0);\n\n  gl.drawElements(\n    gl.TRIANGLES,\n    hexagon.indices.flat().length,\n    gl.UNSIGNED_SHORT,\n    0\n  );\n  gl.flush();\n\n  console.log(\"DONE.\");\n};\n\nfunction glInit(width: number, height: number) {\n  gl.viewport(0, 0, width, height);\n  gl.clearColor(0.0, 0.0, 0.0, 1.0);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n}\n\nfunction create_program(vs: string, fs: string): WebGLProgram | null {\n  const _program = gl.createProgram();\n  if (!_program) {\n    return null;\n  }\n\n  const program = _program as WebGLProgram;\n  gl.attachShader(program, create_shader(vs, gl.VERTEX_SHADER) as WebGLShader);\n  gl.attachShader(program, create_shader(\n    fs,\n    gl.FRAGMENT_SHADER\n  ) as WebGLShader);\n  gl.linkProgram(program);\n\n  if (gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    gl.useProgram(program);\n    return program;\n  } else {\n    alert(gl.getProgramInfoLog(program));\n    return null;\n  }\n}\n\nfunction create_shader(code: string, shader_type: number): WebGLShader | null {\n  const _shader = gl.createShader(shader_type);\n  if (!_shader) {\n    return null;\n  }\n\n  const shader = _shader as WebGLShader;\n  gl.shaderSource(shader, code);\n  gl.compileShader(shader);\n\n  if (gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    return shader;\n  } else {\n    alert(gl.getShaderInfoLog(shader));\n    return null;\n  }\n}\n"]}